use std::sync::{Mutex,Arc};
use std::{thread,time};
use rand::Rng;
use std::rc::Rc;
struct Person{
    use_time: u64,
    id:u32
}
impl Person{
    pub fn new(id:&u32)->Person
    {
        let use_time = rand::thread_rng().gen_range(1,10);
        let id = *id;
        Person{use_time, id}
    }
    pub fn enter( &self)
    {
        
        thread::sleep(time::Duration::from_secs(self.use_time));
        println!("out person id : {}", self.id);
    }
}
fn init_persons(person_list: &mut Vec<Person>) {
    for index in 1..10
    {
        person_list.push(Person::new(&index));
    }
}
fn main() {
    let key = Arc::new(Mutex::new(0));
    let mut wait_list: Vec<Person>=  Vec::new();
    let mut handles = vec![];

    init_persons(&mut wait_list);

    for person in wait_list
    {
        let key_ = Arc::clone(&key);
        let handle = thread::spawn(move || {
            key_.lock().unwrap();
            person.enter();
        });
        handles.push(handle);
    }
    for handle in handles{
        handle.join().unwrap();
    }
}
